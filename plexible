#! /usr/bin/env ruby

require 'fileutils'
require 'optparse'
require 'streamio-ffmpeg'

mp4   = []
other = []
dry_run = false
verbose = false
execute = false
output  = Dir.pwd

def cmd_builder(file, output)
  cmd = "filebot -rename \"#{ file.gsub('"', '\\"') }\" --db thetvdb --format '{n}/{\"Season ${s.pad(2)}\"}/{n} {s00e00} - {t}' -non-strict"
  if output
    cmd += " --output \"#{ output.gsub('"', '\\"') }\""
  end
end

def move_file(file, output, dry_run, execute, verbose)
  cmd = cmd_builder(file, output)
  if dry_run
    puts "#{ cmd }\n"
  elsif execute
    if verbose
      puts `#{ cmd }`
    else
      `#{ cmd }`
    end
  end
end

parser = OptionParser.new do |o|
  o.banner = 'Usage: plexible [options]'

  o.on('--dry-run', 'Shows what the code will do') do
    dry_run = true
  end

  o.on('--run', 'Executes the code') do
    execute = true
  end

  o.on('--output [directory]', 'The directory to save to') do | directory |
    unless Dir.exists?(directory)
      puts "Output directory not found"
      exit
    end
    output = directory
  end

  o.on('--verbose', 'Enables verbose output') do
    verbose = true
  end

  o.on_tail('--help', 'Shows this message') do
    puts o
    exit
  end
end

parser.parse! ARGV

Dir['**/*'].each do |f|
  if %w(.mp4 .m4v).include? File.extname(f)
    mp4 << f
  elsif Dir.exists? f
    # do nothing for now
  elsif %w(.mkv .avi).include? File.extname(f)
    other << f if File.stat(f).size > 1048576 * 60
  end
end

if dry_run || verbose
  puts "To Move\n"
  puts mp4 if mp4.count > 0
  puts "None" if mp4.count == 0

  puts "\n\nTo Process\n"
  puts other
end

unless mp4.count == 0
  puts "\n\nMoving...\n"
  mp4.each { |f| move_file(f, output, dry_run, execute, verbose) }
end

unless other.count == 0
  puts "\n\nProcessing...\n"
  other.each do |f|
    new_file = f + '.mp4'
    aac_file = f + '.aac'
    movie = FFMPEG::Movie.new(f)

    puts "video: #{ movie.video_codec}\naudio: #{ movie.audio_codec }" if verbose

    video = movie.video_codec
    audio = movie.audio_codec

    options = {}
    add_audio = false
    video_codec = 'copy'

    unless video.include? 'h264'
      video_codec = 'libx264'
    end

    if movie.audio_channels > 2
      aac_stream  = FFMPEG::Movie.new(f)
      aac_options = {audio_codec: 'libfaac', audio_channels: 2, custom: '-vn'}
      if execute
        i = 0
        aac_stream.transcode(aac_file, aac_options) do |progress|
          progress = (progress * 100).to_i
          unless progress == i
            print '.'      unless progress == 100
            print "done\n" if progress == 100
            i = progress
          end
        end
      end

      add_audio = true
    end

    if add_audio
      options[:custom] = "-i \"#{ aac_file.gsub('"', '\\"') }\" -map 0:0 -map 0:1 -map 1:0 -c:v #{ video_codec } -c:a copy -c:a copy -bsf:a aac_adtstoasc"
    elsif audio.include? 'aac'
      options[:video_codec] = video_codec
    else
      options[:video_codec] = video_codec
      options[:audio_codec] = 'libfaac'
    end

    if verbose
      puts options
      puts new_file
    end

    if execute
      i = 0
      movie.transcode(new_file, options) do |progress|
        progress = (progress * 100).to_i
        unless progress == i
          print '.'      unless progress == 100
          print "done\n" if progress == 100
          i = progress
        end
      end

      # unlink the aac_file and the original
      if add_audio
        FileUtils.mv(aac_file, File.expand_path('~/.Trash'))
      end

      FileUtils.mv(f, File.expand_path('~/.Trash'))
      move_file(new_file, output, dry_run, execute, verbose)
    end
  end
end


puts "\nCompleted"
